Metadata-Version: 2.1
Name: ds-utils
Version: 0.9.1.0
Summary: The utilities pack for data science and analytics tasksA collection of functions to simplify common operations in data analytics tasks. The core module pd_utils (Pandas Utility) is designed to work with Pandas to simplify common taskssuch as generating metadata for the dataframe, validating merged dataframe, and etc.
Home-page: https://github.com/NicTsyen/datascience_toolkit
Author: NicTsyen
Author-email: support@nicdatalab.com
License: GNU GENERAL PUBLIC LICENSE
Download-URL: https://github.com/NicTsyen/datascience_toolkit/tree/master/dist/ds_utils-0.9.tar.gz
Description: # << Data Science Utilities >>
        Collection of functions to simplify common operations in data analytics tasks. 
        The core module pd_utils (Pandas Utility) is designed to work with Pandas to simplify common tasks such as generating metadata for the dataframe, 
        validating merged dataframe, and etc.
        
        ## Intallation
        
        ```python
        pip install ds_utils
        ```
        
        ## 1. Core Module: "pd_utils"
        The core module is "pd_utils". 
        The module contains a list of functions that can accomplish
        common data analytics tasks with less codes. 
        Basically, these functions are wrappers for commonly-used methods in Pandas, particularly
        methods of DataFrame object. 
        
        Some of the key features of the DataFrame utility functions are as following:
        
        - Generate metadata of columns in a DataFrame
          - Number & percentage of missing values
          - Number & percentage of unique values
          - Data Type
        - Generate accumulated percentage of values in a column
        - Quick Rename of a single column
        - Reorder columns of a DataFrame
        - Standardize column names into iPython-friendly names
        - Retrieve column name by a partial keyword
        - Expand concatenated string in a column into child table 
        
        ### 1.1 Usage
        
        Below is example codes for importing the
        module:
        ```python
        from ds_utils.pd_utils import *
        ```
        The package can be can be used in iPython Console, Jupyter Notebook, and Scripts.
        *Note that using the package in scripts requires the directory to be explicitly specified
        in the methods which expose directory as the parameter.*
        
        There are two ways of calling the functions
        Using the "pd_Missing_Rows" function as the example:
        
        1. through the extended domain (**'ds'**) of the native DataFrame object **(Recommended)**
        ```python
        df = pd.read_excel(os.path.join(os.getcwd(), "data.xlsx"))
        df.ds.pd_Missing_Rows("Column_Name")
        ```
        2. as a static function of pd_utils class
        ```python
        df = pd.read_excel(os.path.join(os.getcwd(), "data.xlsx"))
        pd_Missing_Rows(df, "Column_Name")
        ```
        
        
        ## 2. Data Science Workflow "ds_workflow" (Active Development / Work-In-Progress)
        The **"ds_workflow"** module contains the methods for simplifying common tasks in
        a data science workflow. The methods are built on top of the functions in 
        the core module **"pd_utils"**.
        
        
        Some of the key features of the module are as the following:
        - Get the column name of the features that are categorical
        - Get the column name of the features that are numerical
        - Create or merge the dummy variables created from categorical features
        with option to use k-1 dummification
        - Data Exploration
          - Generate barplot and accumulated percentage report for all the categorical features
          - Generate distribution plot for all the numerical features
          - Generate heatmap of the the correlation matrix
        - Preprocessing
          - Create a dataframe with all standardized features merged with other features
          - Generate features list 
        - Model Assessment
          - Generate Recall-Precision-Threshold Curve
          - Generate truepositive_falsepositive Curve
        
        
        ### 2.1 Usage
        The methods in the module are only callable as the extended domain **'dl'** in the native Pandas DataFrame object.
        These methods are registered using the official accessor method specified in 
        https://pandas.pydata.org/pandas-docs/stable/development/extending.html.
        
        
        Calling a method in **"ds_workflow"**:
        ```python
        df = pd.read_excel(os.path.join(os.getcwd(), "data.xlsx"))
        
        cols_categorical = df.ml.get_features_categorical()
        ```
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Description-Content-Type: text/markdown
